module top_level(
	input k_size_6144,      // 0 if 1056, 1 if 6144 block size
	input [7:0] databit_in1,  // bite-wise serial input
	input CLOCK_50,         // clock , or do we want to do manual clock?
	input ready_in,       // start out put serial stream
	input KEY_0, //active low: pushed=0, using for reset/clear
	output LEDR0, //to be determined how to use these
	output LEDR1, 
	output LEDR2, 
	output LEDR3, 
	output LEDR4, 
	output LEDR5, 
	output LEDR6, 
	output LEDR7,
	output outi, // bitserial output using the same sequence as input
	output outpii, // bitserial output after remapping
	output [6:0] seg0, seg1, seg2, seg3, seg4, seg5,
	input switch
	);
	
	wire clk;
	assign clk = CLOCK_50;

	wire clear;
	assign clear = ~KEY_0;
	
	reg [9:0] mem_counter;
	reg led_latch;
	
//	reg [6143:0] test_case_one = 6144'b
	// MSB 8 bits = 10111111
	reg test_case_one_k_size = 1'b1;
	
	initial begin
		mem_counter = 10'b0;
		led_latch = 1'b0;
		led_val_latch = 16'b0;
		disp_clk = 1'b0;
	end
	
	reg [19:0] count_20;
	reg disp_clk; // 50 Hz clock
	always @(posedge clk) begin
		count_20 <= count_20 + 1'd1;
		if(count_20 == 1000000)
		begin
			count_20<=0;
			disp_clk <= !disp_clk;
		end
	end
	
	/********************** DATA FROM OUTPUT SEQUENCE ****************/
	wire [6:0] out_0, out_1, out_2, out_3, out_4, out_5;
	
	
	wire [3:0] t_out_5, t_out_4, t_out_3, t_out_2, t_out_1, t_out_0;
	assign t_out_0 = led_val_latch[3:0];
	assign t_out_1 = led_val_latch[7:4];
	assign t_out_2 = led_val_latch[11:8];
	assign t_out_3 = led_val_latch[15:12];
	assign t_out_4 = led_val_latch[19:16];
	assign t_out_5 = led_val_latch[23:20];
	
	hex_to_seven datout0(t_out_0, out_0);
	hex_to_seven datout1(t_out_1, out_1);
	hex_to_seven datout2(t_out_2, out_2);
	hex_to_seven datout3(t_out_3, out_3);
	hex_to_seven datout4(t_out_4, out_4);
	hex_to_seven datout5(t_out_5, out_5);
	
	/*********************** DATA FROM MEMORY ************************/
	wire [6:0] counter0, counter1, counter2;
	wire [6:0] counter3 = 7'b0;
	
	// output of ROM
	wire [6:0] mem_dat0, mem_dat1;
	hex_to_seven memout1(memory_dat[7:4], mem_dat1);
	hex_to_seven memout2(memory_dat[3:0], mem_dat0);	
	
	// Counter value
	hex_to_seven counter1h(counter_val_latch[3:0], counter0);
	hex_to_seven counter2h(counter_val_latch[7:4], counter1);
	hex_to_seven counter3h({2'b0, counter_val_latch[9:8]}, counter2);
	/******************************************************************/
	
	/****** LOGIC TO SELECT SEVEN SEGMENT OUTPUT BASED ON SWITCH ******/
	assign seg0 = switch ? out_0 : mem_dat0;
	assign seg1 = switch ? out_1 : mem_dat1;
	assign seg2 = switch ? out_2 : counter0;
	assign seg3 = switch ? out_3 : counter1;
	assign seg4 = switch ? out_4 : counter2;
	assign seg5 = switch ? out_5 : counter3;
	
	
	// counter
	reg done = 0;
	always @(posedge clk or posedge clear) begin
		if (clear) begin
			mem_counter <= 10'b0 ;
			done <= 1'b0;
		end
		else if (mem_counter >= 10'd767) begin
//			mem_counter <= 10'b0;			
			done <= 1'b1;
		end
		else begin
			mem_counter <= mem_counter + 1'd1;
//			done <= 1'b0;
		end
		
	end
		
	reg [23:0] led_val_latch;
	reg [9:0] counter_val_latch;
	reg ctr_latch;
	
	
	always@(*) begin
		if (~done) begin
			led_val_latch <= remap_out[23:0];
			counter_val_latch <= mem_counter;
		end
//		else begin
//			led_val_latch <= 16'b0;
//			counter_val_latch <= 10'b0;
//		end
	end
	
	assign LEDR0 = led_val_latch[0];
	assign LEDR1 = led_val_latch[1];
	assign LEDR2 = led_val_latch[2];
	assign LEDR3 = led_val_latch[3];
	assign LEDR4 = led_val_latch[4];
	assign LEDR5 = led_val_latch[5];
	assign LEDR6 = led_val_latch[6];
	assign LEDR7 = led_val_latch[7];
	
	
	/********************************************
						MEMORY
    ********************************************/
	 dat_mem shifting_data(
			.address    (mem_counter),            // address of data
			.clock      (~clk),             // you may need to invert the clock
			.q          (memory_dat)      // shift data
		);
	
	wire [7:0] memory_dat;
	
	// shift register taking in byte-wise input
	wire [6143:0] shift_reg_out,shift_reg_out1;
	assign shift_reg_out = shift_reg_out1;
	// wire [7:0]
	//**********to do in the future, have 2 shiftreg to 
	shiftreg_6144 input_shiftreg_inst1(.aclr(clear),
												  .clk(clk),
//												  .clk(disp_clk),
//												  .shiftin(databit_in1),
												  .shiftin(memory_dat),
//												  .shiftin(test_case_one),
												  .q_6144(shift_reg_out1),
											     .shiftout()
												  );
	
	// // bitserial shift wires
	// wire  reg1out,  reg2out,  reg3out,  reg4out,  reg5out,  reg6out,  reg7out,  reg8out,  reg9out, reg10out;
	// wire reg11out, reg12out, reg13out, reg14out, reg15out, reg16out, reg17out, reg18out, reg19out, reg20out;
	// wire reg21out, reg22out, reg23out, reg24out;
	
	//remapping module
	//*********passive module, unless a bug is spotted, it's done**************
	wire [6143:0] remap_in, remap_out;
	assign remap_in = shift_reg_out;
	coder_interleaver ci_inst(.cin(remap_in),
//									  .K_eq_6144(k_size_6144),
									  .K_eq_6144(test_case_one_k_size),
									  .cout(remap_out)
									  );

	//counter
	//*******module to be finish and tested***********
	wire [13:0] mux_ind;
	ind_gen counter(.clock(clk),
						 .k(k_size_6144),
						 .ready(ready_in),
						 .reset(clear),
						 .out(mux_ind)
						 );

	//mux
	//*******module to be finish and tested***********
	wire [6143:0] ci_array, cpii_array;
	assign ci_array = shift_reg_out;
	assign cpii_array = remap_out;

	mux6144 ci_mux(.arr(ci_array),
						.ind(mux_ind),
						.r(outi)
						);
	mux6144 cpii_mux(.arr(cpii_array),
						  .ind(mux_ind),
						  .r(outpii)
						  );

endmodule
